
##### Testing Spring Boot Applications

Test Driven Development (TDD) is a popular development practice where you write tests first and write enough production code to pass the tests.

You write various types of tests, such as unit tests, integration tests, performance tests, etc. Unit tests focus on testing one component in isolation, whereas integration tests verify the behavior of a feature, which could possibly involve multiple components.

While doing integration testing, you may have to mock the behavior of dependent components such as third-party web service classes, database method invocations, etc. There are mocking libraries like Mockito, PowerMock, and jMock, for mocking the object’s behavior.


The dependency injection (DI) design pattern encourages programming to practice and write
testable code. With dependency injection, you can inject mock implementations for testing and real implementations for production.


##### Testing Spring Boot Applications

One of the key reasons for the popularity of the Spring framework is its great support for testing.


Spring provides SpringRunner, which is a custom JUnit runner helping to load the Spring ApplicationContext by using @ContextConfiguration


Spring Boot provides the @SpringBootTest annotation, which uses SpringApplication behind the
scenes to load ApplicationContext so that all the Spring Boot features will be available.


For @SpringBootTest, you can pass Spring configuration classes, Spring bean definition XML files, and more, but in Spring Boot applications, you’ll typically use the entry point class.


The Spring Boot Test starter spring-boot-starter-test pulls in the JUnit, Spring Test, and Spring Boot Test modules, along with the following most commonly used mocking and asserting libraries:


Mockito — A Java mocking framework found at http://site.mockito.org/
Hamcrest — A matcher/predicates library for data assertion found at http://hamcrest.org/JavaHamcrest/
AssertJ — A fluent assertion library found at https://joel-costigliola.github.io/assertj/
JSONassert — An assertion library for JSON found at https://github.com/skyscreamer/JSONassert
JsonPath — XPath for JSON found at https://github.com/json-path/JsonPath


MOCK (default) — Loads a WebApplicationContext and provides a mock servlet environment. It will not start an embedded servlet container. If servlet APIs are not on your classpath, this mode will fall back to creating a regular non-web ApplicationContext.

RANDOM_PORT — Loads a ServletWebServerApplicationContext and starts an embedded servlet container listening on a random available port.

DEFINED_PORT — Loads a ServletWebServerApplicationContext and starts an embedded servlet container listening on a defined port (server.port).

NONE — Loads an ApplicationContext using SpringApplication but does not provide a servlet environment.


You can use the @ActiveProfiles annotation to specify which profiles to use so that only the beans
associated with those profiles will be activated.


#### Testing with Mockito
Mockito is a popular Java mocking framework that can be used along with JUnit. Mockito lets you write tests by mocking the external dependencies with the desired behavior.


You can use @Mock to create a mock object and @InjectMocks to inject the dependencies with mocks. You can use @RunWith(MockitoJUnitRunner.class) to initialize the mock objects or trigger the mock object initialization using MockitoAnnotations.initMocks(this) in the JUnit @Before method.


Spring Boot provides the @MockBean annotation that can be used to define a new Mockito mock bean or replace a Spring bean with a mock bean and inject that into their dependent beans. Mock beans will be automatically reset after each test method.


Spring Boot provides annotations like @WebMvcTest, @DataJpaTest, @DataMongoTest, @JdbcTest, and
@JsonTest to test slices of the application.


##### Testing Spring MVC Controllers Using @WebMvcTest

Spring Boot provides the @WebMvcTest annotation , which will autoconfigure SpringMVC infrastructure components and load only @Controller , @ControllerAdvice , @JsonComponent , FIlter , WebMvcConfigurer , HandlerMethodArgumentResolver components.
Other Spring beans (annotated with @Component , @Service , @Repository ) will not be scanned when using this annotation.


##### Testing SpringMVC REST Controllers Using @WebMvcTest

Similar to how you can test SpringMVC controllers, you can test REST controllers as well. You can write
assertions on response data using JsonPath or JSONassert libraries.


